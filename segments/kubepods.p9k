# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8
################################################################
# @title powerlevel9k Segment - Anaconda
# @source [powerlevel9k](https://github.com/bhilburn/powerlevel9k)
##

setopt localoptions

(){
  # Set the right locale to protect special characters
  local LC_ALL="" LC_CTYPE="en_US.UTF-8"
  ################################################################
  # Register segment
  # Parameters:
  #   segment_name  context  background  foreground  Generic  Flat/Awesome-Patched  Awesome-FontConfig  Awesome-Mapped-FontConfig  NerdFont
  #                                                        ⎈          ⎈         ⎈         ⎈         ⎈
  p9k::register_segment "KUBEPODS" "" "blue" "white" $'\u2388'  $'\u2388'  $'\u2388'  $'\u2388'  $'\u2388'

  # Only show this namespaces
  p9k::defined P9K_KUBEPODS_NAMESPACES || P9K_KUBEPODS_NAMESPACES=()
  # Ignore the specified pods
  p9k::defined P9K_KUBEPODS_IGNORE_PODS || P9K_KUBEPODS_IGNORE_PODS=()
  p9k::set_default P9K_KUBEPODS_SHOW_RESTARTS "false"
}

################################################################
# @description
#   Display the Kubernetes Pods
##
# @args
#   $1 string Alignment - left | right
#   $2 integer Segment index
#   $3 boolean Whether the segment should be joined
##
prompt_kubepods() {
  local -Ah namespaces
  local rawData=$(command kubectl get pods --all-namespaces)
  local headline=1
  declare -aU all_namespaces
  for data in "${(f@)rawData}"; do
    # Skip headline
    [[ $headline == 1 ]] && headline=0 && continue
    # Parse and aggregate data
    if [[ "${data}" =~ "^([^ ]+)[ ]+([^ ]+).*([0-9]+)/([0-9]+)[ ]+[a-zA-Z]+[ ]+([0-9]+)" ]]; then
      local current_namespace="${match[1]}"
      local pod="${match[2]}"
      local pods_ready="${match[3]}"
      local pods_overall="${match[4]}"
      local pod_restarts="${match[5]}"

      # Add to list of all pods
      all_namespaces+=( "${current_namespace}" )

      for ignored_pod in ${(@)P9K_KUBEPODS_IGNORE_PODS}; do
        [[ "${pod}" =~ "${ignored_pod}" ]] && continue 2
      done

      local ready=${namespaces[${current_namespace}_READY]:0}
      namespaces[${current_namespace}_READY]=$(( pods_ready + ready ))
      local overall=${namespaces[${current_namespace}_OVERALL]:0}
      namespaces[${current_namespace}_OVERALL]=$(( pods_overall + overall ))
      local restarts=${namespaces[${current_namespace}_RESTARTS]:0}
      namespaces[${current_namespace}_RESTARTS]=$(( pod_restarts + restarts ))
    fi
  done

  local -a desired_namespaces
  # Use the defined namespaces, or all, if no namespaces were defined.
  desired_namespaces=${${P9K_KUBEPODS_NAMESPACES}:-${all_namespaces}}

  local all_running="true"
  # Build up info string
  local -ah info
  for desired_namespace in ${(@)desired_namespaces}; do
    local ready="${${namespaces[${desired_namespace}_READY]}:-0}"
    local overall="${${namespaces[${desired_namespace}_OVERALL]}:-0}"
    local current_info="${desired_namespace}: ${ready}/${overall}"
    [[ "${P9K_KUBEPODS_SHOW_RESTARTS}" == "true" ]] && current_info+="/${${namespaces[${desired_namespace}_RESTARTS]}:-0}"
    info+=("${current_info}")

    [[ ${overall} > 0 && ${ready} != ${overall} ]] && all_running="false"
  done
  # If all pods are up & running, and a special "all running" string was defined, overwrite the info array.
  [[ "${all_running}" == "true" && -n "${P9K_KUBEPODS_ALL_RUNNING_STRING}" ]] && info=( "${P9K_KUBEPODS_ALL_RUNNING_STRING}" )

  p9k::prepare_segment "$0" "" $1 "$2" $3 "${(j: :)info}"
}
